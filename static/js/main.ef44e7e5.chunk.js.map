{"version":3,"sources":["api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["BASE_URL","getUser","userId","fetch","then","response","json","result","data","TodoList","todos","selectUser","selectedUserId","filterByTitle","selectByCompleted","changeCompleted","className","htmlFor","type","id","onChange","event","target","value","map","option","key","title","completed","classNames","checked","onClick","CurrentUser","state","user","this","props","setState","prevProps","name","email","phone","clearUser","React","Component","App","todosForRender","handleChange","query","filter","todo","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ef44e7e5.chunk.js","sourcesContent":["const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function getTodos() {\n  return fetch(`${BASE_URL}/todos`)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n\nexport function getUser(userId) {\n  return fetch(`${BASE_URL}/users/${userId}`)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\nexport const TodoList = ({\n  todos,\n  selectUser,\n  selectedUserId,\n  filterByTitle,\n  selectByCompleted,\n  changeCompleted,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <label htmlFor=\"filter\">Filter todos by title </label>\n    <input\n      type=\"text\"\n      id=\"filter\"\n      className=\"filter\"\n      onChange={event => filterByTitle(event.target.value)}\n    />\n\n    <select\n      className=\"select\"\n      onChange={event => selectByCompleted(event.target.value)}\n    >\n      {['all', 'active', 'completed'].map(option => (\n        <option key={option} value={option}>{option}</option>\n      ))}\n    </select>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(({ id, title, completed, userId }) => (\n          <li\n            key={id}\n            className={classNames('TodoList__item', {\n              'TodoList__item--checked': completed,\n              'TodoList__item--unchecked': !completed,\n            })}\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={completed}\n                onChange={() => changeCompleted(id)}\n              />\n              <p>{title}</p>\n            </label>\n            <button\n              className={classNames('button', {\n                'TodoList__user-button--selected': selectedUserId === userId,\n                'TodoList__user-button': selectedUserId !== userId,\n              })}\n              type=\"button\"\n              onClick={() => selectUser(userId)}\n            >\n              User&nbsp;\n              {userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n      userId: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  filterByTitle: PropTypes.func.isRequired,\n  selectByCompleted: PropTypes.func.isRequired,\n  changeCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    getUser(this.props.userId)\n      .then(user => this.setState({\n        user,\n      }));\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId === this.props.userId) {\n      return;\n    }\n\n    getUser(this.props.userId)\n      .then(user => this.setState({\n        user,\n      }));\n  }\n\n  render() {\n    const { id, name, email, phone } = this.state.user;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${id}`}</span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={this.props.clearUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  user: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n  }).isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getTodos } from './api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    todosForRender: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(todos => todos.filter(todo => todo.title))\n      .then(todos => this.setState({\n        todos,\n        todosForRender: todos,\n      }));\n  }\n\n  selectUser = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  handleChange = (query) => {\n    this.setState(state => ({\n      todosForRender: state.todos\n        .filter(todo => (todo.title\n          ? todo.title.toLowerCase().includes(query.toLowerCase())\n          : '')),\n\n    }));\n  }\n\n  selectByCompleted = (value) => {\n    switch (value) {\n      case 'active':\n        this.setState(state => ({\n          todosForRender: state.todos\n            .filter(todo => !todo.completed),\n        }));\n        break;\n\n      case 'completed':\n        this.setState(state => ({\n          todosForRender: state.todos\n            .filter(todo => todo.completed),\n        }));\n        break;\n\n      default:\n        this.setState(state => ({\n          todosForRender: state.todos,\n        }));\n    }\n  }\n\n  changeCompleted = (id) => {\n    this.setState(state => ({\n      todosForRender: state.todosForRender.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  render() {\n    const { todosForRender, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todosForRender}\n            selectUser={this.selectUser}\n            selectedUserId={selectedUserId}\n            filterByTitle={this.handleChange}\n            selectByCompleted={this.selectByCompleted}\n            changeCompleted={this.changeCompleted}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}