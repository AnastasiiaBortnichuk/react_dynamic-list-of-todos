{"version":3,"sources":["api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["BASE_URL","getUsers","userId","fetch","then","response","json","result","data","TodoList","todos","selectUser","selectedUserId","filterByTitle","selectByCompleted","className","htmlFor","type","id","onChange","event","target","value","map","option","key","title","completed","checked","readOnly","onClick","CurrentUser","state","user","this","props","setState","prevProps","name","email","phone","clearUser","React","Component","App","todosForRender","handleChange","query","filter","todo","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d8cf9da7.chunk.js","sourcesContent":["const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function getTodos() {\n  return fetch(`${BASE_URL}/todos`)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n\nexport function getUsers(userId) {\n  return fetch(`${BASE_URL}/users/${userId}`)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\n\nexport const TodoList = ({\n  todos,\n  selectUser,\n  selectedUserId,\n  filterByTitle,\n  selectByCompleted,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <label htmlFor=\"filter\">Filter todos by title </label>\n    <input\n      type=\"text\"\n      id=\"filter\"\n      className=\"filter\"\n      onChange={event => filterByTitle(event.target.value)}\n    />\n\n    <select\n      className=\"select\"\n      onChange={event => selectByCompleted(event.target.value)}\n    >\n      {['all', 'active', 'completed'].map(option => (\n        <option key={option} value={option}>{option}</option>\n      ))}\n    </select>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(({ id, title, completed, userId }) => (\n          <li\n            key={id}\n            className={`TodoList__item ${(completed)\n              ? 'TodoList__item--checked'\n              : 'TodoList__item--unchecked'}`}\n          >\n            <label>\n              <input type=\"checkbox\" checked={completed} readOnly />\n              <p>{title}</p>\n            </label>\n            <button\n              className={`button ${(selectedUserId === userId)\n                ? 'TodoList__user-button--selected'\n                : 'TodoList__user-button'}`}\n              type=\"button\"\n              onClick={() => selectUser(userId)}\n            >\n              User&nbsp;\n              {userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n      userId: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  filterByTitle: PropTypes.func.isRequired,\n  selectByCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUsers } from '../../api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    getUsers(this.props.userId)\n      .then(user => this.setState({\n        user,\n      }));\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId === this.props.userId) {\n      return;\n    }\n\n    getUsers(this.props.userId)\n      .then(user => this.setState({\n        user,\n      }));\n  }\n\n  render() {\n    const { id, name, email, phone } = this.state.user;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${id}`}</span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={this.props.clearUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  user: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n  }).isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getTodos } from './api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    todosForRender: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(todos => this.setState({\n        todos,\n        todosForRender: todos,\n      }));\n  }\n\n  selectUser = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  handleChange = (query) => {\n    this.setState(state => ({\n      todosForRender: [...state.todos]\n        .filter(todo => (todo.title\n          ? todo.title.toLowerCase().includes(query.toLowerCase())\n          : '')),\n\n    }));\n  }\n\n  selectByCompleted = (value) => {\n    if (value === 'active') {\n      this.setState(state => ({\n        todosForRender: [...state.todos]\n          .filter(todo => !todo.completed),\n      }));\n    } else if (value === 'completed') {\n      this.setState(state => ({\n        todosForRender: [...state.todos]\n          .filter(todo => todo.completed),\n      }));\n    } else {\n      this.setState(state => ({\n        todosForRender: [...state.todos],\n      }));\n    }\n  }\n\n  render() {\n    const { todosForRender, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todosForRender}\n            selectUser={this.selectUser}\n            selectedUserId={selectedUserId}\n            filterByTitle={this.handleChange}\n            selectByCompleted={this.selectByCompleted}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}